{-# START_FILE .gitignore #-}
*~
*.swp
tarballs/
.stack-work/
bin/
obj/
dist/
cache/
tmp/

{-# START_FILE LICENSE #-}
MIT License

Copyright (c) 2021 {{author-name}}{{^author-name}}Author name here{{/author-name}}

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

{-# START_FILE README.md #-}
# {{name}}

## Usage  

* Run `stack build`
* Run `stack exec -- {{name}}-exe` to start the web api server

## Run tests

`stack test`

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE app/Main.hs #-}
{-# LANGUAGE NoImplicitPrelude, OverloadedStrings, UnicodeSyntax, DataKinds, TypeOperators #-}
module Main (main) where

import RIO
import Chakra
import Servant

type HelloRoute = "hello" :> QueryParam "name" Text :> Get '[PlainText] Text
type API = HelloRoute :<|> EmptyAPI

hello :: Maybe Text -> BasicApp Text
hello name = do
  let name' = fromMaybe "Sensei!" name
  logInfo $ "Saying hello to " <> display name'
  return $ "Hello " <> name' <> "!"

main :: IO ()
main = do
  let infoDetail = InfoDetail "example" "dev" "0.1" "change me"
      appEnv = appEnvironment infoDetail
      appVer = appVersion infoDetail
      appAPI = Proxy :: Proxy API
      appServer = hello :<|> emptyServer
  logFunc <- buildLogger appEnv appVer
  middlewares <- chakraMiddlewares infoDetail
  runChakraAppWithMetrics
    middlewares
    EmptyContext
    (logFunc, infoDetail)
    appAPI
    appServer

{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
github:              {{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}
license:             BSD3
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:          {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:           {{copyright}}{{^copyright}}{{year}}{{^year}}2020{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}

extra-source-files:
- README.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on Github at <https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme>

dependencies:
- base >= 4.11 && < 10
- rio
- servant-server
- chakra

ghc-options:
- -Wall
- -Wcompat
- -Widentities
- -Wincomplete-record-updates
- -Wincomplete-uni-patterns
- -Wpartial-fields
- -Wredundant-constraints

library:
  source-dirs: src

executables:
  {{name}}-exe:
    main:                Main.hs
    source-dirs:         app
    dependencies:
    - {{name}}
    - optparse-simple
    - dotenv

    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    - -with-rtsopts=-T

tests:
  {{name}}-test:
    main:                Spec.hs
    source-dirs:         test
    dependencies:
    - {{name}}
    - hspec

    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N

{-# START_FILE stack.yaml #-}
resolver: lts-18.14
packages:
- .
extra-deps:
- chakra-0.1.1

{-# START_FILE src/Lib.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}
module Lib (someFunc) where

someFunc = 1

{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/UtilSpec.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}
module UtilSpec (spec) where

import Util
import Test.Hspec
import Test.Hspec.QuickCheck

spec :: Spec
spec = undefined
